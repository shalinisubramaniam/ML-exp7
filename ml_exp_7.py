# -*- coding: utf-8 -*-
"""ML - exp 7

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ce0UOFNyOiHI_JZ6MQvfvxGMzLFIU1e9
"""

# Step 1: Download the dataset
!wget -q https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user -O social_media_user_data.csv

# Step 2: Load necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler

# Step 3: Load the dataset
df = pd.read_csv("social_media_user_data.csv", sep='|')

# Step 4: Preprocess the data (handle missing values, scale features)
df = df.dropna()  # Drop any missing values
features = df[['age', 'gender']]  # Select relevant features
features = pd.get_dummies(features, drop_first=True)  # Convert categorical to numerical

scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Step 5: Determine the optimal number of clusters using the Elbow Method
sse = []
cluster_range = range(1, 11)
for k in cluster_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_features)
    sse.append(kmeans.inertia_)  # Sum of squared distances to the nearest cluster center

# Step 6: Determine optimal clusters using Silhouette Score
silhouette_scores = []
for k in range(2, 11):  # Silhouette score needs at least 2 clusters
    kmeans = KMeans(n_clusters=k, random_state=42)
    cluster_labels = kmeans.fit_predict(scaled_features)
    silhouette_scores.append(silhouette_score(scaled_features, cluster_labels))

# Step 7: Fit the model with the optimal number of clusters
optimal_k = silhouette_scores.index(max(silhouette_scores)) + 2  # Finding k with max silhouette score

# Output the results
print(f"The optimal number of clusters for segmenting social media users into similar communities is: {optimal_k}")
print("Silhouette Score for optimal k:", silhouette_score(scaled_features, cluster_labels))

# Optional: You can plot the silhouette scores if you want to visualize it
plt.figure(figsize=(10, 6))
plt.plot(range(2, 11), silhouette_scores, marker='o')
plt.xlabel('Number of clusters')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Score for Optimal k')
plt.show()

# Step 1: Download the dataset
!wget -q https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user -O social_media_user_data.csv

# Step 2: Load necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# Step 3: Load the dataset
df = pd.read_csv("social_media_user_data.csv", sep='|')

# Step 4: Preprocess the data (handle missing values, scale features)
df = df.dropna()  # Drop any missing values
features = df[['age', 'gender', 'occupation']]  # Including 'occupation' for more feature variety
features = pd.get_dummies(features, drop_first=True)  # Convert categorical to numerical

scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Step 5: Determine the optimal number of clusters using the Elbow Method
sse = []
cluster_range = range(1, 11)
for k in cluster_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_features)
    sse.append(kmeans.inertia_)  # Sum of squared distances to the nearest cluster center

# Step 6: Determine optimal clusters using Silhouette Score
silhouette_scores = []
for k in range(2, 11):  # Silhouette score needs at least 2 clusters
    kmeans = KMeans(n_clusters=k, random_state=42)
    cluster_labels = kmeans.fit_predict(scaled_features)
    silhouette_scores.append(silhouette_score(scaled_features, cluster_labels))

# Step 7: Fit the model with the optimal number of clusters
optimal_k = silhouette_scores.index(max(silhouette_scores)) + 2  # Finding k with max silhouette score
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
cluster_labels = kmeans.fit_predict(scaled_features)

# Output the results
print(f"The optimal number of clusters for segmenting social media users into similar communities is: {optimal_k}")
print("Silhouette Score for optimal k:", silhouette_score(scaled_features, cluster_labels))

# Plot the Silhouette Scores
plt.figure(figsize=(10, 6))
plt.plot(range(2, 11), silhouette_scores, marker='o')
plt.xlabel('Number of clusters')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Score for Optimal k')
plt.show()

# Apply PCA for 2D visualization
pca = PCA(n_components=2)
pca_features = pca.fit_transform(scaled_features)

# Plotting the clustered data with PCA components
plt.figure(figsize=(10, 6))
plt.scatter(pca_features[:, 0], pca_features[:, 1], c=cluster_labels, cmap='viridis', marker='o', s=50, alpha=0.7)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='red', label='Centroids', marker='X')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.title('K-Means Clustering of Social Media Users (PCA-reduced)')
plt.legend()
plt.show()